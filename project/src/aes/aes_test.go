package aes

import (
  "errors"
  "fmt"
  "testing"
)

func TestRotWord(t *testing.T) {
  in := []byte {
    0x00, 0x11, 0x22, 0x33,
  }
  out := rotWord(in)
  expected := []byte {
    0x11, 0x22, 0x33, 0x00,
  }
  if ok, err := compare(out, expected); !ok {
    t.Errorf("rotWord(0x%X) returned 0x%X. Expected 0x%X. Error: %q", in, out, expected, err.Error())
  }
}

func TestKeyExpansion(t *testing.T) {
  keyIn := []byte {
    0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79,
    0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75,
  }
  out := keyExpansion(keyIn)
  expected := [][]byte {
    { 0x54, 0x68, 0x61, 0x74 },
    { 0x73, 0x20, 0x6D, 0x79 },
    { 0x20, 0x4B, 0x75, 0x6E },
    { 0x67, 0x20, 0x46, 0x75 },
    { 0xE2, 0x32, 0xFC, 0xF1 },
  }
  if ok, err := compare(out[0], expected[0]); !ok {
    t.Errorf("keyExpansion(0x%X) returned 0x%X for index %d. Expected 0x%X. Error: %q", keyIn, out[0], 0, expected[0], err.Error())
  }
  if ok, err := compare(out[4], expected[4]); !ok {
    t.Errorf("keyExpansion(0x%X) returned 0x%X for index %d. Expected 0x%X. Error: %q", keyIn, out[4], 4, expected[4], err.Error())
  }
}

func TestEncrypt(t *testing.T) {
  for _, testCase := range []struct {
    key      []byte
    in       []byte
    expected []byte
  }{
    // C.1 AES-128 (Nk=4, Nr=10)
    {[]byte {
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    }, []byte {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    }, []byte {
      0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
      0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
    }},
    // C.2 AES-192 (Nk=6, Nr=12)
    {[]byte {
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    }, []byte {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    }, []byte {
      0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0,
      0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
    }},
    // C.3 AES-256 (Nk=8, Nr=14)
    {[]byte {
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    }, []byte {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    }, []byte {
      0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
      0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
    }},
  } {
    out := Encrypt(testCase.in, testCase.key)
    if ok, err := compare(out, testCase.expected); !ok {
      t.Errorf("Encrypt(0x%X, 0x%X) returned 0x%X. Expected 0x%X. Error: %q", testCase.in, testCase.key, out, testCase.expected, err.Error())
    }
  }
}

func TestDecrypt(t *testing.T) {
  for _, testCase := range []struct {
    key      []byte
    in       []byte
    expected []byte
  }{
    // C.1 AES-128 (Nk=4, Nr=10)
    {[]byte {
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    }, []byte {
      0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
      0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
    }, []byte {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    }},
    // C.2 AES-192 (Nk=6, Nr=12)
    {[]byte {
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    }, []byte {
      0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0,
      0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
    }, []byte {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    }},
    // C.3 AES-256 (Nk=8, Nr=14)
    {[]byte {
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    }, []byte {
      0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
      0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
    }, []byte {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    }},
  } {
    out := Decrypt(testCase.in, testCase.key)
    if ok, err := compare(out, testCase.expected); !ok {
      t.Errorf("Decrypt(0x%X, 0x%X) returned 0x%X. Expected 0x%X. Error: %q", testCase.in, testCase.key, out, testCase.expected, err.Error())
    }
  }
}

func compare(a, b []byte) (bool, error) {
  if len(a) != len(b) {
    return false, errors.New("lengths differ")
  }
  for i, comparison := range a {
    if comparison != b[i] {
      return false, errors.New(fmt.Sprintf("error at index %d", i))
    }
  }
  return true, nil
}
